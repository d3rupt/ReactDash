{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\weather\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport WeatherTile from './WeatherTile'; //import SearchBar from './SearchBar'\n//import FullCalendar from '@fullcalendar/react'\n//import dayGridPlugin from '@fullcalendar/daygrid'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getLocation = weather => {\n      console.log('APPLEVEL: ' + weather);\n      this.setState({\n        location: weather\n      }, this.RequestWeather);\n    };\n\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    };\n  }\n\n  componentDidMount() {\n    this.RequestWeather;\n  }\n  /*RequestWeather = () => {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=3`)\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json())\n    .then(json => {\n      console.log(json)\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday,\n        })\n      }\n    ).catch(() => {\n      console.log('error')\n    })\n  }*/\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tiles\",\n        children: [this.state.isLoading ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n          icon: this.state.currentData.condition.icon,\n          date: \"Now\",\n          today: this.state.currentData.temp_c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this) : null, this.state.isLoading ? this.state.weatherData.map(data => /*#__PURE__*/_jsxDEV(WeatherTile, {\n          icon: data.day.condition.icon,\n          date: data.date,\n          high: data.day.maxtemp_c,\n          low: data.day.mintemp_c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 45\n        }, this)) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*<SearchBar weatherCallBack={this.getLocation} />\n\n<FullCalendar\n    plugins={[ dayGridPlugin ]}\n    initialView=\"dayGridMonth\"\n    events={[{title:'TEST', date:'2020-12-31'}]}\n    aspectRatio='3'\n    contentHeight='300px'\n  />*/\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/weather/src/App.js"],"names":["React","WeatherTile","App","Component","constructor","props","getLocation","weather","console","log","setState","location","RequestWeather","state","isLoading","weatherData","componentDidMount","render","currentData","condition","icon","temp_c","map","data","day","date","maxtemp_c","mintemp_c"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;AAEA;AACA;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA4BnBC,WA5BmB,GA4BJC,OAAD,IAAa;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeF,OAA3B;AACA,WAAKG,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAEJ;AAAX,OAAd,EAAmC,KAAKK,cAAxC;AACD,KA/BkB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,WAAW,EAAE,IAFF;AAGXJ,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;;AAEDK,EAAAA,iBAAiB,GAAG;AAClB,SAAKJ,cAAL;AACH;AACC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKEK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,mBACC,KAAKJ,KAAL,CAAWC,SAAX,gBACD,QAAC,WAAD;AAAa,UAAA,IAAI,EAAE,KAAKD,KAAL,CAAWK,WAAX,CAAuBC,SAAvB,CAAiCC,IAApD;AAA0D,UAAA,IAAI,EAAC,KAA/D;AAAqE,UAAA,KAAK,EAAE,KAAKP,KAAL,CAAWK,WAAX,CAAuBG;AAAnG;AAAA;AAAA;AAAA;AAAA,gBADC,GAC+G,IAFhH,EAGD,KAAKR,KAAL,CAAWC,SAAX,GACC,KAAKD,KAAL,CAAWE,WAAX,CAAuBO,GAAvB,CAA2BC,IAAI,iBAAK,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEA,IAAI,CAACC,GAAL,CAASL,SAAT,CAAmBC,IAAtC;AAA4C,UAAA,IAAI,EAAEG,IAAI,CAACE,IAAvD;AAA6D,UAAA,IAAI,EAAEF,IAAI,CAACC,GAAL,CAASE,SAA5E;AAAuF,UAAA,GAAG,EAAEH,IAAI,CAACC,GAAL,CAASG;AAArG;AAAA;AAAA;AAAA;AAAA,gBAApC,CADD,GAC2J,IAJ1J;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AA7C+B;AAgDlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAezB,GAAf","sourcesContent":["import React from 'react'\nimport './App.css';\nimport WeatherTile from './WeatherTile'\n//import SearchBar from './SearchBar'\n\n//import FullCalendar from '@fullcalendar/react'\n//import dayGridPlugin from '@fullcalendar/daygrid'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    }\n  }\n\n  componentDidMount() {\n    this.RequestWeather\n}\n  /*RequestWeather = () => {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=3`)\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json())\n    .then(json => {\n      console.log(json)\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday,\n        })\n      }\n    ).catch(() => {\n      console.log('error')\n    })\n  }*/\n  getLocation = (weather) => {\n    console.log('APPLEVEL: ' + weather)\n    this.setState({location: weather}, this.RequestWeather)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Tiles\">\n        {this.state.isLoading ?\n        <WeatherTile icon={this.state.currentData.condition.icon} date=\"Now\" today={this.state.currentData.temp_c} /> : null}\n      {this.state.isLoading ?\n        this.state.weatherData.map(data => (<WeatherTile icon={data.day.condition.icon} date={data.date} high={data.day.maxtemp_c} low={data.day.mintemp_c}/>)) : null }\n        </div>\n      </div>\n    );\n  }\n}\n\n/*<SearchBar weatherCallBack={this.getLocation} />\n\n<FullCalendar\n    plugins={[ dayGridPlugin ]}\n    initialView=\"dayGridMonth\"\n    events={[{title:'TEST', date:'2020-12-31'}]}\n    aspectRatio='3'\n    contentHeight='300px'\n  />*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}