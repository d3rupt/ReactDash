{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\weather\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport WeatherTile from './WeatherTile'; //import SearchBar from './SearchBar'\n//import FullCalendar from '@fullcalendar/react'\n//import dayGridPlugin from '@fullcalendar/daygrid'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.RequestWeather = () => {\n      fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=3`) //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n      .then(response => response.json()).then(json => {\n        this.setState({\n          isLoading: true,\n          currentData: json.current,\n          weatherData: json.forecast.forecastday\n        });\n      }).catch(() => {\n        console.log('error');\n      });\n    };\n\n    this.getLocation = weather => {\n      console.log('APPLEVEL: ' + weather);\n      this.setState({\n        location: weather\n      }, this.RequestWeather);\n    };\n\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tiles\",\n        children: [this.state.isLoading ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n          icon: this.state.currentData.condition.icon,\n          date: \"Now\",\n          today: this.state.currentData.temp_c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this) : null, this.state.isLoading ? this.state.weatherData.map(data => /*#__PURE__*/_jsxDEV(WeatherTile, {\n          icon: data.day.condition.icon,\n          date: data.date,\n          high: data.day.maxtemp_c,\n          low: data.day.mintemp_c\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 45\n        }, this)) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*<SearchBar weatherCallBack={this.getLocation} />\n\n<FullCalendar\n    plugins={[ dayGridPlugin ]}\n    initialView=\"dayGridMonth\"\n    events={[{title:'TEST', date:'2020-12-31'}]}\n    aspectRatio='3'\n    contentHeight='300px'\n  />*/\n\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/weather/src/App.js"],"names":["React","WeatherTile","App","Component","constructor","props","RequestWeather","fetch","then","response","json","setState","isLoading","currentData","current","weatherData","forecast","forecastday","catch","console","log","getLocation","weather","location","state","componentDidMount","render","condition","icon","temp_c","map","data","day","date","maxtemp_c","mintemp_c"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CACA;AAEA;AACA;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAWnBC,cAXmB,GAWF,MAAM;AACrBC,MAAAA,KAAK,CAAE,kGAAF,CAAL,CACA;AADA,OAECC,IAFD,CAEMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFlB,EAGCF,IAHD,CAGME,IAAI,IAAI;AACZ,aAAKC,QAAL,CAAc;AACZC,UAAAA,SAAS,EAAE,IADC;AAEZC,UAAAA,WAAW,EAAEH,IAAI,CAACI,OAFN;AAGZC,UAAAA,WAAW,EAAEL,IAAI,CAACM,QAAL,CAAcC;AAHf,SAAd;AAKC,OATH,EAUEC,KAVF,CAUQ,MAAM;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,OAZD;AAaD,KAzBkB;;AAAA,SA0BnBC,WA1BmB,GA0BJC,OAAD,IAAa;AACzBH,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeE,OAA3B;AACA,WAAKX,QAAL,CAAc;AAACY,QAAAA,QAAQ,EAAED;AAAX,OAAd,EAAmC,KAAKhB,cAAxC;AACD,KA7BkB;;AAEjB,SAAKkB,KAAL,GAAa;AACXZ,MAAAA,SAAS,EAAE,KADA;AAEXG,MAAAA,WAAW,EAAE,IAFF;AAGXQ,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;;AAEDE,EAAAA,iBAAiB,GAAG,CACrB;;AAoBCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BAEE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,mBACC,KAAKF,KAAL,CAAWZ,SAAX,gBACD,QAAC,WAAD;AAAa,UAAA,IAAI,EAAE,KAAKY,KAAL,CAAWX,WAAX,CAAuBc,SAAvB,CAAiCC,IAApD;AAA0D,UAAA,IAAI,EAAC,KAA/D;AAAqE,UAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWX,WAAX,CAAuBgB;AAAnG;AAAA;AAAA;AAAA;AAAA,gBADC,GAC+G,IAFhH,EAGD,KAAKL,KAAL,CAAWZ,SAAX,GACC,KAAKY,KAAL,CAAWT,WAAX,CAAuBe,GAAvB,CAA2BC,IAAI,iBAAK,QAAC,WAAD;AAAa,UAAA,IAAI,EAAEA,IAAI,CAACC,GAAL,CAASL,SAAT,CAAmBC,IAAtC;AAA4C,UAAA,IAAI,EAAEG,IAAI,CAACE,IAAvD;AAA6D,UAAA,IAAI,EAAEF,IAAI,CAACC,GAAL,CAASE,SAA5E;AAAuF,UAAA,GAAG,EAAEH,IAAI,CAACC,GAAL,CAASG;AAArG;AAAA;AAAA;AAAA;AAAA,gBAApC,CADD,GAC2J,IAJ1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA5C+B;AA+ClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAejC,GAAf","sourcesContent":["import React from 'react'\nimport './App.css';\nimport WeatherTile from './WeatherTile'\n//import SearchBar from './SearchBar'\n\n//import FullCalendar from '@fullcalendar/react'\n//import dayGridPlugin from '@fullcalendar/daygrid'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    }\n  }\n\n  componentDidMount() {\n}\n  RequestWeather = () => {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=3`)\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json())\n    .then(json => {\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday,\n        })\n      }\n    ).catch(() => {\n      console.log('error')\n    })\n  }\n  getLocation = (weather) => {\n    console.log('APPLEVEL: ' + weather)\n    this.setState({location: weather}, this.RequestWeather)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n\n        <div className=\"Tiles\">\n        {this.state.isLoading ?\n        <WeatherTile icon={this.state.currentData.condition.icon} date=\"Now\" today={this.state.currentData.temp_c} /> : null}\n      {this.state.isLoading ?\n        this.state.weatherData.map(data => (<WeatherTile icon={data.day.condition.icon} date={data.date} high={data.day.maxtemp_c} low={data.day.mintemp_c}/>)) : null }\n        </div>\n      </div>\n    );\n  }\n}\n\n/*<SearchBar weatherCallBack={this.getLocation} />\n\n<FullCalendar\n    plugins={[ dayGridPlugin ]}\n    initialView=\"dayGridMonth\"\n    events={[{title:'TEST', date:'2020-12-31'}]}\n    aspectRatio='3'\n    contentHeight='300px'\n  />*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}