{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\src\\\\WeatherSection.js\";\nimport React from 'react';\nimport WeatherTile from './WeatherTile';\nimport DayNightCycle from './DayNightCycle'; //Cloud modes\n\nimport CloudsCloudy from './WeatherComponents/Clouds/CloudsCloudy';\nimport PartlyCloudy from './WeatherComponents/Clouds/PartlyCloudy';\nimport Overcast from './WeatherComponents/Clouds/Overcast';\nimport WindyClouds from './WeatherComponents/Clouds/WindyClouds'; //Snow modes\n\nimport LightSnow from './WeatherComponents/Snow/LightSnow';\nimport MedSnow from './WeatherComponents/Snow/MedSnow';\nimport HeavySnow from './WeatherComponents/Snow/HeavySnow';\nimport Blizzard from './WeatherComponents/Snow/Blizzard'; //Rain modes\n\nimport LightRain from './WeatherComponents/Rain/LightRain';\nimport MedRain from './WeatherComponents/Rain/MedRain';\nimport HeavyRain from './WeatherComponents/Rain/HeavyRain';\nimport TorrRain from './WeatherComponents/Rain/TorrRain'; //Storm modes\n\nimport Lightning from './WeatherComponents/Thunderstorm/Lightning';\nimport Fog from './WeatherComponents/Mist&Fog/Fog';\nimport Mist from './WeatherComponents/Mist&Fog/Mist';\nimport './WeatherSection.css';\nimport moment from 'moment';\nimport Calendar from './CalendarComponents/Calendar'; //import { Calendar, momentLocalizer } from 'react-big-calendar';\n// Setup the localizer by providing the moment (or globalize) Object\n// to the correct localizer.\n//const localizer = Calendar.momentLocalizer(moment) // or globalizeLocalizer\n\nclass WeatherSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.RequestWeather = this.RequestWeather.bind(this);\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null,\n      skyPos: {}\n    };\n  }\n\n  RequestWeather() {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`) //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json()).then(json => {\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday\n      });\n      this.checkSunState();\n      this.CheckSunPos();\n    }).catch(() => {\n      console.log('error');\n    });\n  }\n\n  componentDidMount() {\n    this.RequestWeather();\n    setInterval(this.checkSunState, 60000 * 5);\n    setInterval(this.RequestWeather, 120000);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weatherBackground\",\n      children: [this.state.isLoading ? /*#__PURE__*/_jsxDEV(DayNightCycle, {\n        is_day: this.state.currentData.is_day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this) : null, /*#__PURE__*/_jsxDEV(PartlyCloudy, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HeavyRain, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Lightning, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tiles\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nowWeather\",\n          children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n            condition: this.state.currentData.condition.text,\n            icon: this.state.currentData.condition.icon,\n            date: \"Now\",\n            today: this.state.currentData.temp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 7\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast\",\n          children: this.state.isLoading ? this.state.weatherData.map(data => /*#__PURE__*/_jsxDEV(WeatherTile, {\n            condition: this.state.currentData.condition.text,\n            icon: data.day.condition.icon,\n            date: moment(data.date, 'YYYY-MM-DD').calendar(null, {\n              lastDay: '[Yesterday]',\n              sameDay: '[Today]',\n              nextDay: '[Tomorrow]'\n            }),\n            high: data.day.maxtemp_c,\n            low: data.day.mintemp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 45\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default WeatherSection;\n/*    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}*/","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/src/WeatherSection.js"],"names":["React","WeatherTile","DayNightCycle","CloudsCloudy","PartlyCloudy","Overcast","WindyClouds","LightSnow","MedSnow","HeavySnow","Blizzard","LightRain","MedRain","HeavyRain","TorrRain","Lightning","Fog","Mist","moment","Calendar","WeatherSection","Component","constructor","props","RequestWeather","bind","state","isLoading","weatherData","location","skyPos","fetch","then","response","json","setState","currentData","current","forecast","forecastday","checkSunState","CheckSunPos","catch","console","log","componentDidMount","setInterval","render","is_day","condition","text","icon","temp_c","map","data","day","date","calendar","lastDay","sameDay","nextDay","maxtemp_c","mintemp_c"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherTile from './WeatherTile'\r\nimport DayNightCycle from './DayNightCycle'\r\n//Cloud modes\r\nimport CloudsCloudy from './WeatherComponents/Clouds/CloudsCloudy'\r\nimport PartlyCloudy from './WeatherComponents/Clouds/PartlyCloudy'\r\nimport Overcast from './WeatherComponents/Clouds/Overcast'\r\nimport WindyClouds from './WeatherComponents/Clouds/WindyClouds'\r\n//Snow modes\r\nimport LightSnow from './WeatherComponents/Snow/LightSnow'\r\nimport MedSnow from './WeatherComponents/Snow/MedSnow'\r\nimport HeavySnow from './WeatherComponents/Snow/HeavySnow'\r\nimport Blizzard from './WeatherComponents/Snow/Blizzard'\r\n\r\n//Rain modes\r\nimport LightRain from './WeatherComponents/Rain/LightRain'\r\nimport MedRain from './WeatherComponents/Rain/MedRain'\r\nimport HeavyRain from './WeatherComponents/Rain/HeavyRain'\r\nimport TorrRain from './WeatherComponents/Rain/TorrRain'\r\n\r\n//Storm modes\r\nimport Lightning from './WeatherComponents/Thunderstorm/Lightning'\r\n\r\nimport Fog from './WeatherComponents/Mist&Fog/Fog'\r\nimport Mist from './WeatherComponents/Mist&Fog/Mist'\r\n\r\nimport './WeatherSection.css'\r\nimport moment from 'moment'\r\nimport Calendar from './CalendarComponents/Calendar';\r\n\r\n//import { Calendar, momentLocalizer } from 'react-big-calendar';\r\n// Setup the localizer by providing the moment (or globalize) Object\r\n// to the correct localizer.\r\n//const localizer = Calendar.momentLocalizer(moment) // or globalizeLocalizer\r\n\r\nclass WeatherSection extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.RequestWeather = this.RequestWeather.bind(this)\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      weatherData: null,\r\n      location: null,\r\n      skyPos: {}\r\n    }\r\n  }\r\n\r\n  RequestWeather() {\r\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`)\r\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      this.setState({\r\n        isLoading: true,\r\n        currentData: json.current,\r\n        weatherData: json.forecast.forecastday,\r\n        })\r\n        this.checkSunState();\r\n        this.CheckSunPos();\r\n\r\n      }\r\n    ).catch(() => {\r\n      console.log('error')\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.RequestWeather();\r\n    setInterval(this.checkSunState, (60000 * 5))\r\n    setInterval(this.RequestWeather, 120000)\r\n  }\r\n\r\n  render() {\r\n    return(\r\n    <div className=\"weatherBackground\">\r\n      {this.state.isLoading ?\r\n        <DayNightCycle is_day={this.state.currentData.is_day}/> : null}\r\n        <PartlyCloudy />\r\n        <HeavyRain />\r\n        <Lightning />\r\n      <div className=\"Tiles\">\r\n      <div className=\"nowWeather\">\r\n      {this.state.isLoading ?\r\n      <WeatherTile condition={this.state.currentData.condition.text} icon={this.state.currentData.condition.icon} date=\"Now\" today={this.state.currentData.temp_c} /> : null}\r\n      </div>\r\n        <div className=\"forecast\">\r\n      {this.state.isLoading ?\r\n        this.state.weatherData.map(data => (<WeatherTile condition={this.state.currentData.condition.text} icon={data.day.condition.icon} date={moment(data.date, 'YYYY-MM-DD').calendar(null, {\r\n         lastDay : '[Yesterday]',\r\n         sameDay : '[Today]',\r\n         nextDay : '[Tomorrow]'\r\n        })} high={data.day.maxtemp_c} low={data.day.mintemp_c}/>)) : null }\r\n        </div>\r\n      </div>\r\n        <Calendar />\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default WeatherSection\r\n\r\n/*    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}*/\r\n"]},"metadata":{},"sourceType":"module"}