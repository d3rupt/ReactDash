{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\weather\\\\src\\\\WeatherSection.js\";\nimport React from 'react';\nimport WeatherTile from './WeatherTile';\nimport DayNightCycle from './DayNightCycle';\nimport './WeatherSection.css';\nimport moment from 'moment';\n\nclass WeatherSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.RequestWeather = this.RequestWeather.bind(this);\n    this.Rotate = this.Rotate.bind(this);\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    };\n  }\n\n  RequestWeather() {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`) //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json()).then(json => {\n      console.log(json);\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday\n      });\n      const timenow = new Date();\n      console.log();\n      console.log(this.state.weatherData[0].astro.sunrise);\n    }).catch(() => {\n      console.log('error');\n    });\n  }\n\n  componentDidMount() {\n    this.RequestWeather();\n    setInterval(this.RequestWeather, 60000);\n  }\n\n  Rotate() {\n    let degrees = 0;\n    let rotate = setInterval(() => {\n      document.querySelector('.dayNightCycle').style.transform = `rotate({degrees}deg)`;\n      degrees++;\n    }, 10000);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weatherBackground\",\n      children: [this.state.loading ? /*#__PURE__*/_jsxDEV(DayNightCycle, {\n        className: \"dayNightCycle\",\n        sunset: this.state.weatherData[0].astro.sunset,\n        sunrise: this.state.weatherData[0].astro.sunrise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tiles\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nowWeather\",\n          children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n            icon: this.state.currentData.condition.icon,\n            date: \"Now\",\n            today: this.state.currentData.temp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 5\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast\",\n          children: this.state.isLoading ? this.state.weatherData.map(data => /*#__PURE__*/_jsxDEV(WeatherTile, {\n            icon: data.day.condition.icon,\n            date: data.date,\n            high: data.day.maxtemp_c,\n            low: data.day.mintemp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 41\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weatherHouse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default WeatherSection;","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/weather/src/WeatherSection.js"],"names":["React","WeatherTile","DayNightCycle","moment","WeatherSection","Component","constructor","props","RequestWeather","bind","Rotate","state","isLoading","weatherData","location","fetch","then","response","json","console","log","setState","currentData","current","forecast","forecastday","timenow","Date","astro","sunrise","catch","componentDidMount","setInterval","degrees","rotate","document","querySelector","style","transform","render","loading","sunset","condition","icon","temp_c","map","data","day","date","maxtemp_c","mintemp_c"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherTile from './WeatherTile'\r\nimport DayNightCycle from './DayNightCycle'\r\nimport './WeatherSection.css'\r\nimport moment from 'moment'\r\n\r\nclass WeatherSection extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.RequestWeather = this.RequestWeather.bind(this)\r\n    this.Rotate = this.Rotate.bind(this)\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      weatherData: null,\r\n      location: null\r\n    }\r\n  }\r\n\r\n  RequestWeather() {\r\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`)\r\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      console.log(json)\r\n      this.setState({\r\n        isLoading: true,\r\n        currentData: json.current,\r\n        weatherData: json.forecast.forecastday,\r\n        })\r\n        const timenow = new Date()\r\n        console.log()\r\n        console.log(this.state.weatherData[0].astro.sunrise)\r\n      }\r\n    ).catch(() => {\r\n      console.log('error')\r\n    })\r\n  }\r\n  componentDidMount() {\r\n    this.RequestWeather()\r\n    setInterval(this.RequestWeather, 60000)\r\n}\r\n\r\n  Rotate() {\r\n    let degrees = 0;\r\n    let rotate = setInterval(() => {\r\n      document.querySelector('.dayNightCycle').style.transform=`rotate({degrees}deg)`;\r\n      degrees++;\r\n    }, 10000)\r\n  }\r\n  render() {\r\n    return(\r\n    <div className=\"weatherBackground\">\r\n    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}\r\n    <div className=\"Tiles\">\r\n    <div className=\"nowWeather\">\r\n    {this.state.isLoading ?\r\n    <WeatherTile icon={this.state.currentData.condition.icon} date=\"Now\" today={this.state.currentData.temp_c} /> : null}\r\n    </div>\r\n    <div className=\"forecast\">\r\n  {this.state.isLoading ?\r\n    this.state.weatherData.map(data => (<WeatherTile icon={data.day.condition.icon} date={data.date} high={data.day.maxtemp_c} low={data.day.mintemp_c}/>)) : null }\r\n    </div>\r\n    </div>\r\n    <div className=\"weatherHouse\"></div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default WeatherSection\r\n"]},"metadata":{},"sourceType":"module"}