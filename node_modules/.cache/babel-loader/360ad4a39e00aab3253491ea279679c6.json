{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\weather\\\\src\\\\Calendar.js\";\nimport React from \"react\";\nimport moment from 'moment';\nexport default class Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.firstDayOfMonth = () => {\n      let dateObject = this.state.dateObject;\n      let firstDay = moment(dateObject).startOf('month').format(\"d\");\n      return firstDay;\n    };\n\n    let state = {\n      dateObject: moment()\n    };\n  }\n\n  render() {\n    const weekdayshort = moment.weekdaysShort();\n    let weekdayShortName = this.weekdayshort.map(day => {\n      return /*#__PURE__*/_jsxDEV(\"th\", {\n        className: \"week-day\",\n        children: day\n      }, day, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    });\n    let blanks = [];\n\n    for (let i = 0; i < this.firstDayOfMonth; i++) {\n      blanks.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"calendar-day-empty\",\n        children: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }, this));\n    }\n\n    let daysInMonth = [];\n\n    for (let d = 1; d <= this.daysInMonth(); d++) {\n      daysInMonth.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"calendar-day\",\n        children: d\n      }, d, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 24\n      }, this));\n    }\n\n    let totalSlots = [...blanks, ...daysInMonth];\n    let rows = [];\n    let cells = [];\n    totalSlots.forEach((row, i) => {\n      if (i % 7 !== 0) {\n        cells.push(row); // if index not equal 7 that means not go to next week\n      } else {\n        rows.push(cells); // when reach next week we contain all td in last week to rows\n\n        cells = [];\n        cells.push(row); // in current loop we still push current row to new container\n      }\n\n      if (i === totalSlots.length - 1) {\n        // when end loop we add remain date\n        rows.push(cells);\n      }\n    });\n    let daysinmonth = rows.map((d, i) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: d\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Calendar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"calendar-day\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: weekdayshortname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: daysinmonth\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/weather/src/Calendar.js"],"names":["React","moment","Calendar","Component","constructor","props","firstDayOfMonth","dateObject","state","firstDay","startOf","format","render","weekdayshort","weekdaysShort","weekdayShortName","map","day","blanks","i","push","daysInMonth","d","totalSlots","rows","cells","forEach","row","length","daysinmonth","weekdayshortname"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport moment from 'moment'\r\n\r\nexport default class Calendar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    let state={\r\n      dateObject: moment()\r\n    }\r\n  }\r\n  firstDayOfMonth = () => {\r\n    let dateObject = this.state.dateObject;\r\n    let firstDay =\r\n    moment(dateObject)\r\n      .startOf('month')\r\n      .format(\"d\")\r\n    return firstDay;\r\n\r\n  }\r\n  render() {\r\n    const weekdayshort = moment.weekdaysShort();\r\n    let weekdayShortName = this.weekdayshort.map(day => {\r\n      return(\r\n        <th key={day} className=\"week-day\">\r\n        {day}\r\n        </th>\r\n      );\r\n    });\r\n\r\n    let blanks = [];\r\n    for (let i = 0; i < this.firstDayOfMonth; i++) {\r\n      blanks.push(<td className=\"calendar-day-empty\">{\"\"}</td>)\r\n    }\r\n    let daysInMonth = [];\r\n    for (let d = 1; d <= this.daysInMonth(); d++) {\r\n      daysInMonth.push(<td key={d} className=\"calendar-day\">{d}</td>)\r\n    }\r\n    let totalSlots = [...blanks, ...daysInMonth]\r\n    let rows = []\r\n    let cells = []\r\n    totalSlots.forEach((row, i) => {\r\n      if (i % 7 !== 0) {\r\n        cells.push(row)// if index not equal 7 that means not go to next week\r\n      } else {\r\n        rows.push(cells)// when reach next week we contain all td in last week to rows\r\n        cells = []\r\n        cells.push(row)// in current loop we still push current row to new container\r\n      }\r\n      if (i === totalSlots.length - 1) {// when end loop we add remain date\r\n        rows.push(cells)\r\n      }\r\n    })\r\n    let daysinmonth = rows.map((d, i) => {\r\n      return <tr>{d}</tr>\r\n    })\r\n    return(\r\n      <div>\r\n        <h2>Calendar</h2>\r\n        <table className=\"calendar-day\">\r\n    <thead>\r\n      <tr>{weekdayshortname}</tr>\r\n    </thead>\r\n    <tbody>{daysinmonth}</tbody>\r\n  </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}