{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\src\\\\WeatherSection.js\";\nimport React from 'react';\nimport WeatherTile from './WeatherTile';\nimport DayNightCycle from './DayNightCycle'; //Cloud modes\n\nimport CloudsCloudy from './WeatherComponents/Clouds/CloudsCloudy';\nimport PartlyCloudy from './WeatherComponents/Clouds/PartlyCloudy';\nimport Overcast from './WeatherComponents/Clouds/Overcast';\nimport WindyClouds from './WeatherComponents/Clouds/WindyClouds'; //Snow modes\n\nimport LightSnow from './WeatherComponents/Snow/LightSnow';\nimport MedSnow from './WeatherComponents/Snow/MedSnow';\nimport HeavySnow from './WeatherComponents/Snow/HeavySnow';\nimport Blizzard from './WeatherComponents/Snow/Blizzard'; //Rain modes\n\nimport LightRain from './WeatherComponents/Rain/LightRain';\nimport MedRain from './WeatherComponents/Rain/MedRain';\nimport HeavyRain from './WeatherComponents/Rain/HeavyRain';\nimport TorrRain from './WeatherComponents/Rain/TorrRain'; //Storm modes\n\nimport Lightning from './WeatherComponents/Thunderstorm/Lightning';\nimport Fog from './WeatherComponents/Mist&Fog/Fog';\nimport Mist from './WeatherComponents/Mist&Fog/Mist';\nimport './WeatherSection.css';\nimport moment from 'moment';\n\nclass WeatherSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.RequestWeather = this.RequestWeather.bind(this);\n    this.Sunset = this.Sunset.bind(this);\n    this.Sunrise = this.Sunrise.bind(this);\n    this.CheckSunriseState = this.CheckSunriseState.bind(this);\n    this.CheckSunsetState = this.CheckSunsetState.bind(this);\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    };\n  }\n\n  RequestWeather() {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`) //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json()).then(json => {\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday\n      });\n      this.checkSunState();\n    }).catch(() => {\n      console.log('error');\n    });\n  }\n\n  componentDidMount() {\n    this.RequestWeather();\n    setInterval(this.checkSunState, 60000 * 5);\n    setInterval(this.RequestWeather, 120000);\n  }\n\n  Sunset() {\n    const now = parseInt(moment().format.valueOf());\n    let sunset;\n\n    if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\n      sunset = moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\n    } else {\n      sunset = moment(`${this.state.weatherData[1].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\n    }\n\n    const sunsetTimer = setTimeout(() => {\n      document.querySelector('.dayNightCircle').style.animation = 'dayNightCycle 1800000s 1s forward';\n      document.querySelector('.dayNightCircle').classList.add('nightTime');\n      this.Sunrise();\n    }, parseInt(sunset - now));\n  }\n\n  Sunrise() {\n    const now = parseInt(moment().format.valueOf());\n    let sunrise;\n\n    if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\n      sunrise = moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\n    } else {\n      sunrise = moment(`${this.state.weatherData[1].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\n    }\n\n    const sunriseTimer = setTimeout(() => {\n      console.log('this many ms till sunset: ' + parseInt(sunrise - now));\n      document.querySelector('.dayNightCircle').style.animation = 'dayNightCycle 1800000s 1s normal';\n      document.querySelector('.dayNightCircle').classList.add('dayTime');\n      this.Sunset();\n    }, parseInt(sunrise - now));\n  }\n\n  CheckSunriseState() {\n    const now = moment().valueOf();\n\n    if (this.state.currentData.is_day == 0) {\n      if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  CheckSunsetState() {\n    const now = moment().valueOf();\n\n    if (this.state.currentData.is_day = 1) {\n      if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunset}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weatherBackground\",\n      children: [this.state.isLoading ? /*#__PURE__*/_jsxDEV(DayNightCycle, {\n        is_day: this.state.currentData.is_day\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this) : null, /*#__PURE__*/_jsxDEV(PartlyCloudy, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Fog, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tiles\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nowWeather\",\n          children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n            icon: this.state.currentData.condition.icon,\n            date: \"Now\",\n            today: this.state.currentData.temp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 5\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast\",\n          children: this.state.isLoading ? this.state.weatherData.map(data => /*#__PURE__*/_jsxDEV(WeatherTile, {\n            icon: data.day.condition.icon,\n            date: moment(data.date, 'YYYY-MM-DD').format('MMM D'),\n            high: data.day.maxtemp_c,\n            low: data.day.mintemp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 41\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default WeatherSection;\n/*    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}*/","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/src/WeatherSection.js"],"names":["React","WeatherTile","DayNightCycle","CloudsCloudy","PartlyCloudy","Overcast","WindyClouds","LightSnow","MedSnow","HeavySnow","Blizzard","LightRain","MedRain","HeavyRain","TorrRain","Lightning","Fog","Mist","moment","WeatherSection","Component","constructor","props","RequestWeather","bind","Sunset","Sunrise","CheckSunriseState","CheckSunsetState","state","isLoading","weatherData","location","fetch","then","response","json","setState","currentData","current","forecast","forecastday","checkSunState","catch","console","log","componentDidMount","setInterval","now","parseInt","format","valueOf","sunset","date","astro","sunrise","subtract","sunsetTimer","setTimeout","document","querySelector","style","animation","classList","add","sunriseTimer","is_day","render","condition","icon","temp_c","map","data","day","maxtemp_c","mintemp_c"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport WeatherTile from './WeatherTile'\r\nimport DayNightCycle from './DayNightCycle'\r\n//Cloud modes\r\nimport CloudsCloudy from './WeatherComponents/Clouds/CloudsCloudy'\r\nimport PartlyCloudy from './WeatherComponents/Clouds/PartlyCloudy'\r\nimport Overcast from './WeatherComponents/Clouds/Overcast'\r\nimport WindyClouds from './WeatherComponents/Clouds/WindyClouds'\r\n//Snow modes\r\nimport LightSnow from './WeatherComponents/Snow/LightSnow'\r\nimport MedSnow from './WeatherComponents/Snow/MedSnow'\r\nimport HeavySnow from './WeatherComponents/Snow/HeavySnow'\r\nimport Blizzard from './WeatherComponents/Snow/Blizzard'\r\n\r\n//Rain modes\r\nimport LightRain from './WeatherComponents/Rain/LightRain'\r\nimport MedRain from './WeatherComponents/Rain/MedRain'\r\nimport HeavyRain from './WeatherComponents/Rain/HeavyRain'\r\nimport TorrRain from './WeatherComponents/Rain/TorrRain'\r\n\r\n//Storm modes\r\nimport Lightning from './WeatherComponents/Thunderstorm/Lightning'\r\n\r\nimport Fog from './WeatherComponents/Mist&Fog/Fog'\r\nimport Mist from './WeatherComponents/Mist&Fog/Mist'\r\n\r\nimport './WeatherSection.css'\r\nimport moment from 'moment'\r\n\r\nclass WeatherSection extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.RequestWeather = this.RequestWeather.bind(this)\r\n    this.Sunset = this.Sunset.bind(this)\r\n    this.Sunrise = this.Sunrise.bind(this)\r\n    this.CheckSunriseState = this.CheckSunriseState.bind(this)\r\n    this.CheckSunsetState = this.CheckSunsetState.bind(this)\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      weatherData: null,\r\n      location: null\r\n    }\r\n  }\r\n\r\n  RequestWeather() {\r\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`)\r\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      this.setState({\r\n        isLoading: true,\r\n        currentData: json.current,\r\n        weatherData: json.forecast.forecastday,\r\n        })\r\n        this.checkSunState()\r\n\r\n      }\r\n    ).catch(() => {\r\n      console.log('error')\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.RequestWeather();\r\n    setInterval(this.checkSunState, (60000 * 5))\r\n    setInterval(this.RequestWeather, 120000)\r\n  }\r\n\r\n  Sunset() {\r\n    const now = parseInt(moment().format.valueOf());\r\n    let sunset;\r\n    if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\r\n      sunset = moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\r\n    } else {\r\n      sunset = moment(`${this.state.weatherData[1].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\r\n    }\r\n    const sunsetTimer = setTimeout(() => {\r\n      document.querySelector('.dayNightCircle')\r\n      .style.animation = 'dayNightCycle 1800000s 1s forward';\r\n      document.querySelector('.dayNightCircle')\r\n      .classList.add('nightTime');\r\n      this.Sunrise();\r\n    }, parseInt(sunset - now));\r\n  }\r\n\r\n  Sunrise() {\r\n    const now = parseInt(moment().format.valueOf());\r\n    let sunrise;\r\n    if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\r\n      sunrise = moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\r\n    } else {\r\n      sunrise = moment(`${this.state.weatherData[1].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf();\r\n    }\r\n    const sunriseTimer = setTimeout(() => {\r\n      console.log('this many ms till sunset: ' + parseInt(sunrise - now))\r\n      document.querySelector('.dayNightCircle')\r\n      .style.animation = 'dayNightCycle 1800000s 1s normal';\r\n      document.querySelector('.dayNightCircle')\r\n      .classList.add('dayTime');\r\n      this.Sunset();\r\n    }, parseInt(sunrise - now));\r\n  }\r\n\r\n  CheckSunriseState() {\r\n    const now = moment().valueOf();\r\n    if (this.state.currentData.is_day == 0) {\r\n      if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunrise}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  CheckSunsetState() {\r\n    const now = moment().valueOf();\r\n    if (this.state.currentData.is_day = 1) {\r\n      if (now < moment(`${this.state.weatherData[0].date} ${this.state.weatherData[1].astro.sunset}`, 'YYYY-MM-DD hh:mm A').subtract(15, 'minutes').valueOf()) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n    <div className=\"weatherBackground\">\r\n    {this.state.isLoading ?\r\n      <DayNightCycle is_day={this.state.currentData.is_day}/> : null}\r\n      <PartlyCloudy />\r\n      <Fog />\r\n    <div className=\"Tiles\">\r\n    <div className=\"nowWeather\">\r\n    {this.state.isLoading ?\r\n    <WeatherTile icon={this.state.currentData.condition.icon} date=\"Now\" today={this.state.currentData.temp_c} /> : null}\r\n    </div>\r\n    <div className=\"forecast\">\r\n  {this.state.isLoading ?\r\n    this.state.weatherData.map(data => (<WeatherTile icon={data.day.condition.icon} date={moment(data.date, 'YYYY-MM-DD').format('MMM D')} high={data.day.maxtemp_c} low={data.day.mintemp_c}/>)) : null }\r\n    </div>\r\n    </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default WeatherSection\r\n\r\n/*    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}*/\r\n"]},"metadata":{},"sourceType":"module"}