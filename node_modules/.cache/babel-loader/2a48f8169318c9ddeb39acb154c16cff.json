{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\weather\\\\src\\\\WeatherSection.js\";\nimport React from 'react';\nimport WeatherTile from './WeatherTile';\nimport DayNightCycle from './DayNightCycle';\nimport './WeatherSection.css';\nimport moment from 'moment';\n\nclass WeatherSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.RequestWeather = this.RequestWeather.bind(this);\n    this.Sunset = this.Sunset.bind(this); //this.Sunrise = this.Sunrise.bind(this)\n\n    this.state = {\n      isLoading: false,\n      weatherData: null,\n      location: null\n    };\n  }\n\n  RequestWeather() {\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`) //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\n    .then(response => response.json()).then(json => {\n      this.setState({\n        isLoading: true,\n        currentData: json.current,\n        weatherData: json.forecast.forecastday\n      });\n      this.Sunset();\n    }).catch(() => {\n      console.log('error');\n    });\n  }\n\n  componentDidMount() {\n    this.RequestWeather();\n    setInterval(this.Sunset, 30000);\n    setInterval(this.RequestWeather, 120000);\n  }\n\n  Sunset() {\n    const sunsetStartTime = this.state.weatherData[0].astro.sunset.split(':');\n    const sunsetRef = new Date();\n    console.log('TESTSUSET: ' + sunsetStartTime[1]);\n\n    if (sunsetRef.getHours() === parseInt(sunsetStartTime[0]) && sunsetRef.getMinutes === parseInt(sunsetStartTime[1].split(' ')[0]) && sunsetStartTime[1].split(' ')[-1] === 'AM') {\n      document.querySelector('.dayNightCircle').style.animation = 'dayNightCycle 12s infinite 1s forward';\n    }\n    /*const sunsetStartTime = moment(this.state.weatherData[0].astro.sunset, 'hh:mm A').subtract(10, 'minutes').format('LT')\r\n    if (moment().format('LT').isSame(sunsetStartTime)) {\r\n        document.querySelector('.dayNightCircle').style.animation = 'dayNightCycle 12s infinite 1s forward'\r\n    }*/\n\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weatherBackground\",\n      children: [/*#__PURE__*/_jsxDEV(DayNightCycle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Tiles\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nowWeather\",\n          children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(WeatherTile, {\n            icon: this.state.currentData.condition.icon,\n            date: \"Now\",\n            today: this.state.currentData.temp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 5\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast\",\n          children: this.state.isLoading ? this.state.weatherData.map(data => /*#__PURE__*/_jsxDEV(WeatherTile, {\n            icon: data.day.condition.icon,\n            date: moment(data.date, 'YYYY-MM-DD').format('MMM D'),\n            high: data.day.maxtemp_c,\n            low: data.day.mintemp_c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 41\n          }, this)) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weatherHouse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default WeatherSection;\n/*    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}*/","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/weather/src/WeatherSection.js"],"names":["React","WeatherTile","DayNightCycle","moment","WeatherSection","Component","constructor","props","RequestWeather","bind","Sunset","state","isLoading","weatherData","location","fetch","then","response","json","setState","currentData","current","forecast","forecastday","catch","console","log","componentDidMount","setInterval","sunsetStartTime","astro","sunset","split","sunsetRef","Date","getHours","parseInt","getMinutes","document","querySelector","style","animation","render","condition","icon","temp_c","map","data","day","date","format","maxtemp_c","mintemp_c"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,sBAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd,CAHiB,CAIjB;;AAEA,SAAKE,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,WAAW,EAAE,IAFF;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKD;;AAEDN,EAAAA,cAAc,GAAG;AACfO,IAAAA,KAAK,CAAE,kGAAF,CAAL,CACA;AADA,KAECC,IAFD,CAEMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFlB,EAGCF,IAHD,CAGME,IAAI,IAAI;AACZ,WAAKC,QAAL,CAAc;AACZP,QAAAA,SAAS,EAAE,IADC;AAEZQ,QAAAA,WAAW,EAAEF,IAAI,CAACG,OAFN;AAGZR,QAAAA,WAAW,EAAEK,IAAI,CAACI,QAAL,CAAcC;AAHf,OAAd;AAKE,WAAKb,MAAL;AACD,KAVH,EAWEc,KAXF,CAWQ,MAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,KAbD;AAcD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKnB,cAAL;AACAoB,IAAAA,WAAW,CAAC,KAAKlB,MAAN,EAAc,KAAd,CAAX;AACAkB,IAAAA,WAAW,CAAC,KAAKpB,cAAN,EAAsB,MAAtB,CAAX;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAMmB,eAAe,GAAG,KAAKlB,KAAL,CAAWE,WAAX,CAAuB,CAAvB,EAA0BiB,KAA1B,CAAgCC,MAAhC,CAAuCC,KAAvC,CAA6C,GAA7C,CAAxB;AACA,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBG,eAAe,CAAC,CAAD,CAA3C;;AACA,QAAII,SAAS,CAACE,QAAV,OAAyBC,QAAQ,CAACP,eAAe,CAAC,CAAD,CAAhB,CAAjC,IACFI,SAAS,CAACI,UAAV,KAAyBD,QAAQ,CAACP,eAAe,CAAC,CAAD,CAAf,CAAmBG,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,CAAD,CAD/B,IAEFH,eAAe,CAAC,CAAD,CAAf,CAAmBG,KAAnB,CAAyB,GAAzB,EAA8B,CAAC,CAA/B,MAAsC,IAFxC,EAE8C;AACxCM,MAAAA,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,EAA0CC,KAA1C,CAAgDC,SAAhD,GAA4D,uCAA5D;AACH;AAEH;AACJ;AACA;AACA;;AACG;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACA;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA,8BACA,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,gCACA;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,oBACC,KAAK/B,KAAL,CAAWC,SAAX,gBACD,QAAC,WAAD;AAAa,YAAA,IAAI,EAAE,KAAKD,KAAL,CAAWS,WAAX,CAAuBuB,SAAvB,CAAiCC,IAApD;AAA0D,YAAA,IAAI,EAAC,KAA/D;AAAqE,YAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWS,WAAX,CAAuByB;AAAnG;AAAA;AAAA;AAAA;AAAA,kBADC,GAC+G;AAFhH;AAAA;AAAA;AAAA;AAAA,gBADA,eAKA;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBACD,KAAKlC,KAAL,CAAWC,SAAX,GACC,KAAKD,KAAL,CAAWE,WAAX,CAAuBiC,GAAvB,CAA2BC,IAAI,iBAAK,QAAC,WAAD;AAAa,YAAA,IAAI,EAAEA,IAAI,CAACC,GAAL,CAASL,SAAT,CAAmBC,IAAtC;AAA4C,YAAA,IAAI,EAAEzC,MAAM,CAAC4C,IAAI,CAACE,IAAN,EAAY,YAAZ,CAAN,CAAgCC,MAAhC,CAAuC,OAAvC,CAAlD;AAAmG,YAAA,IAAI,EAAEH,IAAI,CAACC,GAAL,CAASG,SAAlH;AAA6H,YAAA,GAAG,EAAEJ,IAAI,CAACC,GAAL,CAASI;AAA3I;AAAA;AAAA;AAAA;AAAA,kBAApC,CADD,GACiM;AAFhM;AAAA;AAAA;AAAA;AAAA,gBALA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAYA;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAZA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAgBD;;AAtE0C;;AAwE7C,eAAehD,cAAf;AAEA;AACA","sourcesContent":["import React from 'react'\r\nimport WeatherTile from './WeatherTile'\r\nimport DayNightCycle from './DayNightCycle'\r\nimport './WeatherSection.css'\r\nimport moment from 'moment'\r\n\r\nclass WeatherSection extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.RequestWeather = this.RequestWeather.bind(this)\r\n    this.Sunset = this.Sunset.bind(this)\r\n    //this.Sunrise = this.Sunrise.bind(this)\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      weatherData: null,\r\n      location: null\r\n    }\r\n  }\r\n\r\n  RequestWeather() {\r\n    fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=Winnipeg&days=2`)\r\n    //fetch(`http://api.weatherapi.com/v1/forecast.json?key=6018bc6ca5bb4a4884c184418202812&q=${this.state.location}&days=5`)\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      this.setState({\r\n        isLoading: true,\r\n        currentData: json.current,\r\n        weatherData: json.forecast.forecastday,\r\n        })\r\n        this.Sunset()\r\n      }\r\n    ).catch(() => {\r\n      console.log('error')\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.RequestWeather()\r\n    setInterval(this.Sunset, 30000)\r\n    setInterval(this.RequestWeather, 120000)\r\n  }\r\n\r\n  Sunset() {\r\n    const sunsetStartTime = this.state.weatherData[0].astro.sunset.split(':')\r\n    const sunsetRef = new Date();\r\n    console.log('TESTSUSET: ' + sunsetStartTime[1])\r\n    if (sunsetRef.getHours() === parseInt(sunsetStartTime[0]) &&\r\n      sunsetRef.getMinutes === parseInt(sunsetStartTime[1].split(' ')[0]) &&\r\n      sunsetStartTime[1].split(' ')[-1] === 'AM') {\r\n          document.querySelector('.dayNightCircle').style.animation = 'dayNightCycle 12s infinite 1s forward';\r\n      }\r\n\r\n    /*const sunsetStartTime = moment(this.state.weatherData[0].astro.sunset, 'hh:mm A').subtract(10, 'minutes').format('LT')\r\n    if (moment().format('LT').isSame(sunsetStartTime)) {\r\n        document.querySelector('.dayNightCircle').style.animation = 'dayNightCycle 12s infinite 1s forward'\r\n    }*/\r\n  }\r\n\r\n  render() {\r\n    return(\r\n    <div className=\"weatherBackground\">\r\n    <DayNightCycle />\r\n    <div className=\"Tiles\">\r\n    <div className=\"nowWeather\">\r\n    {this.state.isLoading ?\r\n    <WeatherTile icon={this.state.currentData.condition.icon} date=\"Now\" today={this.state.currentData.temp_c} /> : null}\r\n    </div>\r\n    <div className=\"forecast\">\r\n  {this.state.isLoading ?\r\n    this.state.weatherData.map(data => (<WeatherTile icon={data.day.condition.icon} date={moment(data.date, 'YYYY-MM-DD').format('MMM D')} high={data.day.maxtemp_c} low={data.day.mintemp_c}/>)) : null }\r\n    </div>\r\n    </div>\r\n    <div className=\"weatherHouse\"></div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\nexport default WeatherSection\r\n\r\n/*    {this.state.loading ?\r\n    <DayNightCycle className=\"dayNightCycle\" sunset={this.state.weatherData[0].astro.sunset} sunrise={this.state.weatherData[0].astro.sunrise} /> : null}*/\r\n"]},"metadata":{},"sourceType":"module"}