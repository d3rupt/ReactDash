{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Documents\\\\Projects\\\\webDevPractice\\\\React\\\\weather\\\\src\\\\PicsNNews\\\\News\\\\News.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Headline from './Headline';\nimport('./News.css');\nexport default function News() {\n  _s();\n\n  const [newsJson, getNewsJson] = useState(null);\n  const [headlines, getHeadlines] = useState(null);\n  const [shownHeadlines, getShownHeadlines] = useState(null);\n  useEffect(() => {\n    GetNews();\n    setInterval(ShuffleNews, 60000 * 5);\n  }, []);\n\n  const GetNews = () => {\n    fetch('https://old.reddit.com/user/news-bot-dash/m/news/top.json').then(res => res.json()).then(newsLinks => {\n      let posts = [...newsLinks.data.children.slice(0, 24)];\n      getHeadlines(posts);\n    });\n  };\n\n  const ShuffleNews = () => {\n    let posts = [...headlines];\n\n    if (headlines.length >= 3) {\n      const indexes = [0, 1, 2];\n      const timeout = 100;\n      indexes.forEach(index => {\n        setTimeout(() => {\n          document.getElementById(`headline${index}`).classList.add('opacity0');\n        }, timeout * (index + 1));\n      });\n      getHeadlines(posts.slice(3));\n    } else {\n      GetNews();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"news\",\n    children: headlines ? headlines.slice(0, 3).map((headline, index) => {\n      return /*#__PURE__*/_jsxDEV(Headline, {\n        title: headline.data.title,\n        subreddit: headline.data.subreddit_name_prefixed,\n        thumbnail: headline.data.thumbnail\n      }, `headline${index}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 16\n      }, this);\n    }) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n}\n\n_s(News, \"WMzTGkgjsisNF6lpqwk8TS2sdWQ=\");\n\n_c = News;\n\nvar _c;\n\n$RefreshReg$(_c, \"News\");","map":{"version":3,"sources":["C:/Users/Nathan/Documents/Projects/webDevPractice/React/weather/src/PicsNNews/News/News.js"],"names":["React","useState","useEffect","Headline","News","newsJson","getNewsJson","headlines","getHeadlines","shownHeadlines","getShownHeadlines","GetNews","setInterval","ShuffleNews","fetch","then","res","json","newsLinks","posts","data","children","slice","length","indexes","timeout","forEach","index","setTimeout","document","getElementById","classList","add","map","headline","title","subreddit_name_prefixed","thumbnail"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAQ,YAAR;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,CAAC,IAAD,CAApD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO;AACPC,IAAAA,WAAW,CAACC,WAAD,EAAc,QAAQ,CAAtB,CAAX;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMF,OAAO,GAAG,MAAM;AACpBG,IAAAA,KAAK,CAAC,2DAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,SAAS,IAAI;AACjB,UAAIC,KAAK,GAAG,CAAC,GAAGD,SAAS,CAACE,IAAV,CAAeC,QAAf,CAAwBC,KAAxB,CAA8B,CAA9B,EAAgC,EAAhC,CAAJ,CAAZ;AACAd,MAAAA,YAAY,CAACW,KAAD,CAAZ;AACH,KALC;AAMH,GAPC;;AASF,QAAMN,WAAW,GAAG,MAAM;AACxB,QAAIM,KAAK,GAAG,CAAC,GAAGZ,SAAJ,CAAZ;;AACA,QAAIA,SAAS,CAACgB,MAAV,IAAoB,CAAxB,EAA2B;AACzB,YAAMC,OAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB;AACA,YAAMC,OAAO,GAAG,GAAhB;AACAD,MAAAA,OAAO,CAACE,OAAR,CAAgBC,KAAK,IAAI;AACvBC,QAAAA,UAAU,CAAC,MAAM;AACfC,UAAAA,QAAQ,CACHC,cADL,CACqB,WAAUH,KAAM,EADrC,EAEKI,SAFL,CAGKC,GAHL,CAGS,UAHT;AAID,SALS,EAKPP,OAAO,IAAEE,KAAK,GAAC,CAAR,CALA,CAAV;AAMD,OAPD;AAQAnB,MAAAA,YAAY,CAACW,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAD,CAAZ;AACC,KAZH,MAYS;AACLX,MAAAA,OAAO;AACR;AACJ,GAjBD;;AAkBI,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,cACCJ,SAAS,GAAGA,SAAS,CAACe,KAAV,CAAgB,CAAhB,EAAkB,CAAlB,EAAqBW,GAArB,CAAyB,CAACC,QAAD,EAAWP,KAAX,KAAqB;AACzD,0BAAO,QAAC,QAAD;AAAmC,QAAA,KAAK,EAAEO,QAAQ,CAACd,IAAT,CAAce,KAAxD;AAA+D,QAAA,SAAS,EAAED,QAAQ,CAACd,IAAT,CAAcgB,uBAAxF;AAAiH,QAAA,SAAS,EAAEF,QAAQ,CAACd,IAAT,CAAciB;AAA1I,SAAgB,WAAUV,KAAM,EAAhC;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFY,CAAH,GAEL;AAHL;AAAA;AAAA;AAAA;AAAA,UADF;AAOH;;GA5CuBvB,I;;KAAAA,I","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Headline from './Headline'\r\n\r\nimport ('./News.css')\r\n\r\nexport default function News() {\r\n  const [newsJson, getNewsJson] = useState(null);\r\n  const [headlines, getHeadlines] = useState(null);\r\n  const [shownHeadlines, getShownHeadlines] = useState(null)\r\n\r\n  useEffect(() => {\r\n    GetNews()\r\n    setInterval(ShuffleNews, 60000 * 5)\r\n  }, [])\r\n\r\n  const GetNews = () => {\r\n    fetch('https://old.reddit.com/user/news-bot-dash/m/news/top.json')\r\n    .then(res => res.json())\r\n    .then(newsLinks => {\r\n      let posts = [...newsLinks.data.children.slice(0,24)];\r\n      getHeadlines(posts);\r\n  })\r\n}\r\n\r\nconst ShuffleNews = () => {\r\n  let posts = [...headlines]\r\n  if (headlines.length >= 3) {\r\n    const indexes = [0, 1, 2];\r\n    const timeout = 100\r\n    indexes.forEach(index => {\r\n      setTimeout(() => {\r\n        document\r\n            .getElementById(`headline${index}`)\r\n            .classList\r\n            .add('opacity0')\r\n      }, timeout*(index+1))\r\n    })\r\n    getHeadlines(posts.slice(3,))\r\n    } else {\r\n      GetNews()\r\n    }\r\n}\r\n    return(\r\n      <div className=\"news\">\r\n      {headlines ? headlines.slice(0,3).map((headline, index) => {\r\n        return <Headline key={`headline${index}`} title={headline.data.title} subreddit={headline.data.subreddit_name_prefixed} thumbnail={headline.data.thumbnail} />\r\n      }) : null}\r\n      </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}